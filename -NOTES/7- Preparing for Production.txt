

In the section, we'll be talking about the necessary steps to prepare our application for production.


- Adding the Home Page
  
  Currently we don't have a homepage. Let's quickly add a homepage for this project.
  
  Go to the core app and here we need to add a new file called 'urls.py'.
  To save time, we go to playground.urls.py, and borrow some code. 
  
  So, in core.urls.py:
  
        from django.views.generic import TemplateView
        from django.urls import path

        # URLConf
        urlpatterns = [
            path('', TemplateView.as_view(template_name='core/index.html'))
        ]
    Some explanation about the above code:
    We need to add path for the root endpoint.There's really no need to create an explicit view here; we can use one of the generic 
    views in Django to render a template. So, on the top, we import from 'django.views.generic import TemplateView'.
    Now, instead of referencing one of our views, we're going to reference 'TemplateView'. We pass 'core/index.html' as the 
    template name.

  Now, let's create this 'index.html'.
  
  In the core app, we create a new folder called 'templates' and another new folder called 'core' in this folder, 
  and here we have index.html. For now, we just want to create a basic HTML template: 
        
        # So, type an exclamation mark, and press enter:

        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1.0" />
            <title>Document</title>
        </head>
        <body></body>
        </html>
  
    
  So that's a basic HTML template.
  
  Now, we need to bring this url pattern in the main url's module of our application.
  So, storefront.urls.py, we define a new path:

        path('', include('core.urls')),
  
  Now let's test our implementation. Go to => http://127.0.0.1:8000/
  As you can see, we have an empty page.
  But we're not done here; in the next lesson, we will improve this and make it pretty.



- Adding Static Assets
  
  Let's make our homepage pretty.
  
  If you look at the zip file that I gave you at the beginning of the course; we have a folder called 'static files',
  and here we have two files: an SVG file, which is our logo, and a CSS file. In Django, we refer to this files as 'static';
  so static files are images, style sheets, and JavaScript files that we bundle with our application.
  So we're going to add these to our project so our homepage becomes beautiful.
  
  In the core app, create a new folder called 'static' and another new folder called 'core' in this folder, 
  and then drag and drop these two files right there.
  
  Now go to our template (index.html). First of all, we have to use a special tag to load our static assets.
  So, on the top, we use a special tag called 'load' for loading static assets:
  
        {% load static %} 
  
  Next, in the head section, we reference our style sheet:
  
        <link rel="stylesheet" href="{% static 'core/styles.css' %}" /> 
  
  In the 'body' section, we need to type a bit of HTML code:
  
        <div class="home-page">
            <img src="{% static 'core/logo.svg' %}" alt="Logo" class="logo" />
        </div>
    
  Now back to the home page, refresh; here is our new homepage.
  

- Collecting Static Assets

  In the previous lesson, we added a couple of static files to the core app, and everything magically worked.
  But you really need to understand what happens under the hood because later, when we talk about deployment, you're going to 
  face some issues if you don't understand how static files are served in Django.
  
  So, a quick background:
  
  When you're in development mode, when debugging is turned on, Django goes to every app, and if there is a static folder, 
  Django is going to copy all this content to a special folder on disk. So, all these folders, all these static folders, 
  from different apps are going to be copied into a single bucket. 
  
  This is not going to work in production. It only works when debugging is turned on. For production, we have a special command 
  for collecting static files from different apps. 
  
  But, for that to work, first we have to configure a setting. 
  So go to the MEDIA_ROOT in settings.py:
        
        # MEDIA_ROOT is the full path to the folder that contains user uploaded files. We take all these files, and serve them 
        # from this endpoint. We have the same concept for static files. As you can see, we already have STATIC_URL for serving 
        # static assets; and we need also to configure the STATIC_ROOT setting; so Django will know where our static assets are 
        # located on disk:
        
        STATIC_ROOT = os.path.join(BASE_DIR, 'static')
        
  With this setting, now we can explicitly collect static files from different apps.
  So, in the terminal we run:
        
        python manage.py collectstatic 
  
  Our static files were copied to this folder => '......MyCourseFiles\storefront3\static' 
  Now we have a new folder called 'static' in the root folder; and this contains all the static files from different apps; these 
  apps are all the apps that we have listed in our settings module. So if you forget to include an app there, running 
  'collectstatic' is not going to copy the static files of that app for you.
  
  So, in production, every time we deploy, we should run this command (python manage.py collectstatic) in order to collect 
  static files from different apps.
  In development, we don't want all the static files to end up in our github repository.
  So, in .gitignore, we add this file to exclude it from our github repository:
  
        /static/
        

- Serving Static Assets

  Django doesn't support serving static files in production.
  So, even though we have a command for collecting the static files, we cannot serve them. 
  To add this feature to Django, we have to install a library called 'whitenoise':
  
        pipenv install whitenoise
  
  Now we should go to our middleware settings, and add whitenoise to middleware:
  
        # this middleware should be as high as possible but it should come after security middleware. So right after it:
        'whitenoise.middleware.WhiteNoiseMiddleware',
  
  With this simple change, now we can serve starting assets in production.


- Configuring Logging
  
  Now, we are going to talk about configuring logging, which is an important and flexible technique for diagnosing problems; so, later, after we 
  deploy your application; if some feature is not working, we can look at our log file and troubleshoot the issue.
  
  NOTE: The following block of notes are explanations for the code that comes just after it:
  The first step is configuring logging. In our settings module, we define a new setting called 'logging', and set it to a dictionary.
  In this dictionary, we should always add a couple of keys; one of them is 'version', which we set to 1; the other is 'disable_existing_loggers';
  as a best practice, we should always set this to False because there are other loggers that come with Django, or other libraries we use; 
  we don't want to disable them, we want to capture everything that comes with them.
  So, we set these two keys; then, we define a new key called 'handlers'. With 'handlers', we determine what we want to do with block messages: 
  Do we want to write them to the console or to a file; or what? So, here we can define one or more handlers. We are gonna define one handler 
  called 'console', and set it to a dictionary; here we set the class to 'logging.StreamHandler'; so with this class, we can write lot messages 
  to the console. Similarly, we're going to define another 'handler' called 'file'; and in this dictionary once again we set the class to 
  'logging.FileHandler'. We should also specify the name of the file; so, we set file name to, let's say, 'general.log'. So now we have two handers.
  Next, we define another key called 'loggers'. For example, we can define a logger for the playground app, and this will capture any log messages sent 
  from this app; or we can be more specific and define a logger called 'playground.views'; this will only capture log messages sent from this module.
  If you remove the name of the logger, and use an empty string, this will capture all messages from all apps; so this logging framework gives us a lot 
  of flexibility. Most of the time we don't want to have different loggers for different apps; that's really unnecessary; so, here we define a logger 
  to capture all log messages in our project (so we set it to an empty string). Now, in this dictionary, first we need to specify the handlers; 
  so, once we capture we capture log messages, what do you want to do with that? Let's say you want to write them to the console and in a file. 
  So, here we reference the handlers that we defined earlier. So, 'console' and 'file'. Now, with this logging framework, we can define different 
  loggers, and say, anything raised in the playground app should be written to the console but anything raised from the store app should be written 
  to both console and in a file. So, once again, we have a lot of flexibility here. The next thing we need to specify here is the level of log messages.
  Log messages have a level, or 'severity': DEBUG, INFO, WARNING, ERROR, and CRITICAL. As we go down this list, the severity of log message increases; 
  it becomes more important. Now, when defining a logger, we need to specify a level, and this longer will only capture log messages at this level
  or higher. For example, if we set this to 'ERROR', this will only capture ERROR and CRITICAL message. So, DEBUG, INFO and WARNING messages are not 
  captured. Now, here we don't have to hardcode a particular level; we can use an environment variable and this gives us further flexibility. 
  For example, here we can say 'os.environ.get(DJANGO_LOG_LEVEL, 'INFO'); so we can read that environment variable called 'DJANGO_LOG_LEVEL'. If this is not 
  set, we can assume let's say INFO by default. Now, with this implementation, we can go to our production server, and set this environment variable to 
  capture different types of messages. So this is how we configure a logger. Now, optionally, we can also specify a 'formatter'; so we can define one 
  or more formatters here. With a formatter, we specify how long messages should be formatted. For example, we can define a 'simple' formatter that 
  shows only the messgage; and in addition to that, we can define another formatter 'verbose' that shows more information about log messages.
  So, let's add verbose to a dictionary; now, here we need to set a couple of keys: The first one is the 'format' of our log messages. Now, these log 
  messages have different attributes. You can see all attributes of the logrecord class in the link (https://docs.python.org/3/library/logging.html#logrecord-attributes)
  So, when writing to our log file, let's say, we want to start with the daytime of the log message; so, here we add "{asctime}"; that's an attribute of 
  the logrecord. After that, let's say, we want to show the level name; it may be a WARNING, an ERROR, CRITICALal ERROR, etc. Then we want to specify 
  the module ({name}) that this log message was raised from; followed by the log message. So this is the format and we can configure it anyway we want 
  to. Then, we specify the 'style'. (For the 'style', look at the video):

        LOGGING = {
            'version': 1,
            'disable_existing_loggers': False,
            'handlers': {
                'console': {
                    'class': 'logging.StreamHandler'
                },
                'file': {
                    'class': 'logging.FileHandler',
                    'filename': 'general.log',
                    'formatter': 'verbose'
                }
            },
            'loggers': {
                '': {
                    'handlers': ['console', 'file'],
                    'level': os.environ.get('DJANGO_LOG_LEVEL', 'INFO')
                }
            },
            'formatters': {
                'verbose': {
                    'format': '{asctime} ({levelname}) - {name} - {message}',
                    'style': '{' 
                }
            }
        }
  
  This is how we configure logging; next, we will see how to write log messages.



- Logging

  In playground.views.py:
        
         app so for this demo let's remove caching we don't need it anymore instead we're going to import the login module now in this module we have a function called get logger now here we pass the name magic attribute and this will translate to playground that views okay and this is where our logger bucket comes in so earlier I told you that we can define a logger called playground that views and this will only capture messages raised from this module the alternatively chemical pass playground that views but the problem with this approach is that if you rename this app or this module this code is going to break so as a best practice it's best to use name this way we don't have surprises everywhere we get the name of the current module and use it as the name of the logger or the bucket for writing log messages to okay so here we get a logger object now this object has methods for writing different types of lock messages so we have logger.info the writing and info message we have logger that debug error critical and so on okay so as a real example over here we're calling httpane as an external service let's say this is a critical part of our application and in case something goes wrong you're going to be able to easily travel through the issue so before making this call we can write an inform message so logger that info and say calling HTTP then we can write another logger message after we get the response so received the response now if something goes wrong you want to write a critical message to our logger so we should wrap this inside a try catch block like this and catch exceptions of time requests dot connection and here we can call logger that critical and say HTTP bin is offline okay back to the browser let's head this Endpoint alright now in our terminal window look we have two log messages calling httpane and receive the response so here we only see the log message we don't see any additional attributes about this message like the data and time severe cancer and so on because in our login configuration when defining the console handler with only a specified the class we didn't specify a formatter so now let's say when writing things to unlock file you want to use is formatting that we defined here so in this handler file this specify a formatter and set it to variables so this way we can have different formatters for different handlers okay now let's hit the Endpoint one more time good back to our project here's our log file take a look in this log file you have log messages formatted in this particular way so first we have the date on time then we have a severe of the message next we have the name of the module but the message was raised from followed by the actual message so the first one is coming from Django the utility we are seeing this because Django comes with a few built-in Loggers that is why when configuring logging we set disable existing Loggers to fault so we don't miss any of this messages okay back to our log file the second lock message we have here is a warning coming from silk you're saying this because I disabled silk middleware so don't worry about it then after that we have to inform messages coming from playground videos the first one is saying calling hdb and the second one is receive the response so this is log in in Action now in the future when we dip around application if you're not interested in info and warning messages we can simply set this environment variable Django Locke level to a higher level let's say error and with this bill only see error and critical messages in our log file now one last thing before we finish this lesson let's go back to our views module so as you can see adding this login statements is useful but it's also making our code verbose so this is the cost you're paying for diagnosing problems use login wisely don't throw logging statements everywhere that's what's going to make our code harder to maintain also treat this log as public information so don't ever write any sensitive information to this lock like social security numbers credit card numbers and so on because if someone gets access to this log

hard harder to maintain also treat this log as public information so don't ever write any sensitive information to this lock like social security numbers credit card numbers and so on because if someone gets access to this log file they can see all this information in plain text alright one last thing before we finish this lesson here's our log file but it will explode this from git otherwise as we work with our application this log file gets updated and every time we have to commit it to get it doesn't really make sense so let's go to get ignore and add general.log over here okay so we're done here next we're going to talk about managing development and production settings



- Managing Development and Production Settings

in every application we need to separate development from production settings for example look at our database settings here currently we are running MySQL on localhost with this user account this is only for Development so tomorrow when you want to deploy this application we don't have to come back here and modify this setting every single time that's very tedious and error problem and also we don't want to ever ever ever store a production password here because this file is checked into source control so anyone who has access to our source control and see our production password in plain text so for production we should store our database password in an environment variable and then read it in this file okay so let me show you how to separate development and production settings first we're going to our project and here in the storefront folder we create a new folder called settings then remove our settings module inters folder and then rhynamic to comment so we're going to have three fans here one includes all the settings that are common across different environments and then we're going to have environment specific files so we're going to have one file for development another for production and potentially other files for staging and test environments so let's Create another file called the pi and one more called prod.pine now in each file we need to import all the settings from the common module so from common in the current folder import everything and we should do the same in our department setting file now let's go to comment.i and make a few changes so I'm going to start from the top let's see what we need to move okay the first one is secretly and look we have a warning here because we don't want to store the secret key in plain text and as file this is only for the vomit in production we should read this from an environment variable so let's grab these two lines and move them to step up high we don't need the common anymore now for production we should read this from an environment variable so here first important module then we set secret key to os that environment variable call secret underline key now active comment the pipe the next one is debug you want to turn this on only in development so let's grab this to nice as well and move them to data pie I would prefer to put debug first the order doesn't really matter production notice that is to false so let's do that real quick all right now let me turn off debugging we need to set another setting called allowed posts so back to common the pi look is the settings I was talking about with this setting we specify the server or the servers that can run this application this is only required if debug is turned on so we're gonna move this to our production settings plan now currently we don't have a production server in the next section we're going to provision that production server in haruku once we have that double come back and store its address here okay so after a common module next we have are install apps so these are common across all environments you also have middleware so for now we're pretty much done the only other setting I want to move is our database settings so I want to move this section to our development file that we don't need the comment anymore okay now for production we're going to have a different approach for configuring our database connection string for now don't worry about it so we're done with this files now we need to do a search on our project and anywhere we have a reference to Django settings module to make a slight change there so let me close its files now we're going to search for Django on the light settings on their line module so we have five files that have a reference to this environment variable let's modify them one by one the first one is in managed.i so when we run Python managers of Pi run server manage the time tries to get this environment variable if it's not sad it's set to storefront that settings now this is our previous sent module before we moved it selling folder now we need to change this to storefront.settings.dep like this okay nine production we're going to set this environment variable to store front that settings.p so when you run this application in a production environment are production settings will come into effect okay now back over here so we updated manage the

the next reference is in Pi test.ini so for our tests we want to load our development settings as well the next file is asgi the pi which also reference our development settings we have one more here celery again we're going to reference our development settings and the last one is going to be wsgi.pi okay so now let's make sure that we haven't broken anything so here in the terminal let's run Python manage the pi run server all right our application load so let's head over to store slash collections all right here are all our collections beautiful now let's make sure that we can also run our tests so in a new terminal window we're going to run Pi test all right all our tests passed but we have 5 warnings now let's see where this is coming from so look this is coming from White Noise so white noise is complaining that there is no directory at this path now what is this past referring to well we have users / my name / desktop sunlight desktop I have a folder called storefront 3 that is our project folder here now inside this folder we have storefront which refers to this folder right here and then we have static so white noise is looking for the static folder but the static folder is not there it's inside the root folder so our static folder let me collected our study files is right here it's not part of storefront the reason we're saying this warning is because we restructured our settings module so if you look at comment.i on the top we have this variable based there this should point to the project directory not the storefront folder okay so to solve this problem we need to add parent at the end now let's run our test one more time beautiful so this is how we can manage development and production status





- Serving the Application with Gunicorn


so far we've been using this development web servant that is built into Django this is great for development because every time we change our code this web server automatically restarts our application but this server is only meant for development in a production environment within a fast and robust web server and for that we're going to use g unicorn which is short for green unicorn so let's stop this process I'd run and install g unicorn alright that will start our application with geonicorn we run gionicorn and then specify the name of a special module in this application let me show you what that is so back to our project look candlestore front folder we have a file called double sgi.p this is also called whiskey wsgi is short for web server gateway interface so in this file first we're giving this environment variable at default value in this case storefront the settings of the f and then we call get whiskey application to get an application instance so when launching our application with geonicorn we need to a specify this module as the entry point so back to the terminal we type storefront.wsgi so we're going to the storefront folder and loading whiskey module now take a alright so you started a web server at this address localhost for 8,000 exactly like before but this web server is a lot faster than the development server that comes with Django so let's go to this address is our homepage beautiful now one thing you need to know about geonicorn is that unlike the development server that comes with Django g unicorn doesn't take changes in our code so if you make any changes we have to manually restart our web server now we don't have to worry about this because as I said geonic is only for production in our development environment will continue using the development server